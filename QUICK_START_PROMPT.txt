==============================================
TRADESIGHT - QUICK START PROMPT FOR CURSOR AI
==============================================

PROJECT: Build a Trading Session Profit Calculator in Python

🎯 GOAL: Calculate "Target Net Profit" with <10% error compared to industry standard

📁 WHAT TO BUILD:
- Landing page with calculator (NO login/signup)
- Input: Capital, Trades, Accuracy %, Risk-Reward Ratio
- Output: Target Profit prediction
- Backend: Python + FastAPI + scikit-learn
- Frontend: Streamlit (simple) OR React (advanced)

🧮 THE CHALLENGE:
Match this calculation:
  Input: $1,000 capital, 10 trades, 50% accuracy, 1:3 RR
  Expected Output: $11,799.69 profit
  
Use Kelly Criterion + Machine Learning to reverse-engineer the formula.

📊 TEST DATA:
30 real test cases provided in CSV format with varying parameters.
Your formula must achieve <10% average error across all cases.

🛠️ TECH STACK:
- Python 3.10+
- FastAPI (backend)
- NumPy, Pandas, scikit-learn (calculations)
- Streamlit (UI - easiest) OR React + Tailwind
- Plotly (charts)

📂 STRUCTURE:
tradesight/
  ├── app/
  │   ├── main.py (FastAPI)
  │   ├── models/kelly_optimizer.py
  │   ├── models/ml_model.py
  │   └── api/calculate.py
  ├── data/test_cases.csv
  ├── frontend/streamlit_app.py
  └── tests/

✨ KEY FEATURES:
1. Single Session Calculator (main page)
2. Results Display with charts
3. Batch Testing (validate against 30 cases)
4. Formula Optimizer tool
5. Comparison mode (multiple scenarios)

🎨 UI DESIGN:
- Clean, minimal, professional
- Direct landing on calculator (no auth)
- Show: Target Profit, Kelly %, Expected Return
- Charts: Profit curve, sensitivity analysis

📋 ACCEPTANCE:
✅ <10% average error on 30 test cases
✅ <100ms calculation time
✅ Handles edge cases (negative EV, huge numbers)
✅ Responsive UI
✅ Well-documented code

🔬 OPTIMIZATION APPROACHES:
1. Polynomial Regression (scikit-learn) - Recommended
2. Optimized Kelly Formula (scipy.optimize)
3. Gradient Boosting (XGBoost)
4. Neural Network (TensorFlow) - if needed

⚡ QUICK IMPLEMENTATION:
Day 1: Setup + baseline Kelly formula
Day 2-3: ML optimization for accuracy
Day 4: API endpoints
Day 5-6: Frontend UI
Day 7: Testing & deployment

🎁 BONUS:
- Monte Carlo simulation
- Risk analysis metrics
- Strategy comparison
- PDF export

📖 KEY INSIGHT:
The target formula uses AGGRESSIVE Kelly fractions (75-90% vs typical 20-25%).
This creates exponential compound growth with astronomical profits at high accuracy+RR.

🚀 START BUILDING!

Full detailed prompt: See FRESH_PROJECT_PROMPT.md
Test cases: See test_cases.csv (30 cases)

Good luck! 📊💰









